var searchIndex = JSON.parse('{\
"comet_eventbus":{"doc":"An universal eventbus for Rust!","t":"NDDGDIEDGDLXLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLEDDDGDNDNDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["BridgeError","Event","EventListener","EventListeners","Eventbus","Listener","ListenerError","Topic","TopicHandlersMap","TopicKey","as_ref","async_trait","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bridge","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","create_event","create_topic","default","deref","deref","deref_mut","downcast","encode_hex","encode_hex_upper","eq","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from_ref","from_ref","from_ref","from_ref","get_bus","get_key","get_listeners","handle","hash","hash","into","into","into","into","into","into","into_inner","into_request","into_request","into_request","into_request","into_request","into_request","new","new","post","post","post_message","provide","random","register","serialized","source","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_as_str","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","unregister","unregister","vzip","vzip","vzip","vzip","vzip","vzip","BridgeError","BridgeListener","BridgedEventListener","BridgedTopic","BridgerClient","BridgerClientInner","Deserialization","EventbusBridge","Serialization","SerializedMessage","accept_compressed","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","connect","connect","create_topic","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_ref","from_ref","get_key","handle","into","into","into","into","into","into","into","into_request","into_request","into_request","into_request","into_request","into_request","into_request","listen","max_decoding_message_size","max_encoding_message_size","new","new","post","post","post","provide","register","send_compressed","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unregister","unregister","vzip","vzip","vzip","vzip","vzip","vzip","vzip","with_interceptor","with_origin"],"q":[[0,"comet_eventbus"],[133,"comet_eventbus::bridge"]],"d":["error of bridge feature","An <code>Event</code> for passing","An <code>EventListener</code> wrapper for <code>Listener</code>","short hand of event listeners set","An asynchronous <code>Eventbus</code> to interact with","Event listener","Error of Listener exceptions","A <code>Topic</code> wrapper for a <code>TopicKey</code>","short hand of topic to handlers map","Wrapper of bytes represent a <code>Topic</code>","","","","","","","","","","","","","","","bridge <code>Eventbus</code> from an external source","","","","","","","","","create an event from message","create a <code>Topic</code> using a topic key","","","","","downcast a Serialized Event to a concreate type.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","get the associated eventbus","get the key of a topic","get event listeners subscribed to this topic","handler callback to process event","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","into inner message","","","","","","","create an new event","create an new eventbus","shorthand for post event to eventbus","post an event to eventbus","shorthand for post message to eventbus","","Generate a random topic","register a listener to eventbus","serialize a message","","","","","","","","try parse topic key as an utf-8 str","","","","","","","","","","","","","","","","","","","shorthand for unregister listener from eventbus","unregister an event listener","","","","","","","Bridge Error","Bridge Serialized Event to an concreate typed Event","An <code>EventListener</code> wrapper for <code>Listener</code>","A bridge <code>Topic</code>","Inner Grpc Client of the bridge","","failed to deserialize a request to a concrete type","A bridge to connect two seperated <code>Eventbus</code>","failed to serialize a request","An serialized message","Enable decompressing responses.","","","","","","","","","","","","","","","","","","","Attempt to create a new client by connecting to a given â€¦","connect to another Eventbus","create a <code>Topic</code> using a topic key","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","get topic key","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","bind to an address and listen for connections","Limits the maximum size of a decoded message.","Limits the maximum size of an encoded message.","","create a new bridge from an exist <code>Eventbus</code>","","shorthand for post event to eventbus","post an event to eventbus, returning a Result","","register a listener to bridged eventbus","Compress requests with the given encoding.","","","","","","","","","","","","","","","","","","","","","","","","","unregister a bridged event listener","shorthand for unregister bridged listener from eventbus","","","","","","","","",""],"i":[21,0,0,0,0,0,0,0,0,0,1,0,5,6,8,1,7,21,5,6,8,1,7,21,0,5,6,1,7,5,6,1,7,8,7,7,5,1,5,5,1,1,6,1,6,6,1,1,5,6,8,1,1,7,21,21,5,6,8,1,1,1,1,1,7,21,21,5,6,1,7,8,8,8,34,6,1,5,6,8,1,7,21,5,5,6,8,1,7,21,5,7,8,7,8,21,1,7,5,21,5,6,1,7,1,21,1,5,6,8,1,7,21,5,6,8,1,7,21,5,6,8,1,7,21,6,7,5,6,8,1,7,21,0,0,0,0,0,0,13,0,13,0,43,53,43,51,10,45,52,13,53,43,51,10,45,52,13,43,45,43,45,43,45,45,43,51,10,45,52,13,13,53,43,51,10,45,52,13,43,45,51,53,53,43,51,10,45,52,13,53,43,51,10,45,52,13,45,43,43,43,45,43,51,45,13,45,43,43,45,13,53,43,51,10,45,52,13,53,43,51,10,45,52,13,53,43,51,10,45,52,13,45,52,53,43,51,10,45,52,13,43,43],"f":[0,0,0,0,0,0,0,0,0,0,[1,[[3,[2]]]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[[5,[4]]],[[5,[4]]]],[6,6],[1,1],[7,7],[[]],[[]],[[]],[[]],[8,5],[[7,[9,[1]]],8],[[],7],[5],[1,[[3,[2]]]],[5],[[[5,[10]]],[[14,[[5,[[0,[11,12]]]],13]]]],[[],[[16,[15]]]],[[],[[16,[15]]]],[[6,6],17],[[1,1],17],[[],17],[[],17],[[],17],[[],17],[[[5,[18]],19],20],[[6,19],20],[[8,19],20],[[1,19],20],[[1,19],20],[[7,19],20],[[21,19],20],[[21,19],20],[[]],[[]],[[]],[[[22,[2]]],1],[[[22,[2]]],1],[23,1],[[[3,[2]]],1],[[]],[[]],[[]],[13,21],[[]],[[]],[[]],[[]],[8,7],[8,1],[8,24],[5,[[27,[[26,[25]]]]]],[[6,28]],[[1,28]],[[]],[[]],[[]],[[]],[[]],[[]],[5],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[[9,[1]]],5],[[],7],[[[8,[[0,[30,31]]]],[5,[[0,[30,31]]]]]],[[7,[5,[[0,[30,31]]]]]],[[[8,[[0,[30,31]]]],[0,[30,31]]]],[32],[33,1],[[7,[9,[1]],34],6],[[[5,[35]]],[[14,[[5,[10]],13]]]],[21,[[37,[36]]]],[[]],[[]],[[]],[[]],[[],38],[[],38],[1,[[14,[23,39]]]],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[6],[[7,6]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,[[[43,[[42,[41]]]],44],[[43,[[42,[41]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[43,[4]]],[[43,[4]]]],[45,45],[[]],[[]],[[[47,[46]]],[[14,[[43,[48]],49]]]],[[45,[50,[23]]],[[14,[49]]]],[[45,[9,[1]]],51],[[[43,[18]],19],20],[[[51,[18]],19],20],[[10,19],20],[[45,19],20],[[[52,[18]],19],20],[[13,19],20],[[13,19],20],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[51,1],[[[53,[[0,[11,12,30,31]]]],[5,[10]]],[[27,[[26,[25]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[45,54],[[14,[49]]]],[[[43,[[42,[41]]]],33],[[43,[[42,[41]]]]]],[[[43,[[42,[41]]]],33],[[43,[[42,[41]]]]]],[[[42,[41]]],[[43,[[42,[41]]]]]],[7,45],[[[43,[[42,[41]]]],[55,[0]]],[[14,[56,57]]]],[[[51,[[0,[35,30,31]]]],[5,[[0,[35,30,31]]]]],[[14,[[22,[58]]]]]],[[45,[5,[[0,[35,30,31]]]]],[[14,[[22,[58]]]]]],[32],[[45,[9,[1]],[34,[[0,[12,30,31]]]]],[[52,[[0,[12,30,31]]]]]],[[[43,[[42,[41]]]],44],[[43,[[42,[41]]]]]],[[]],[[]],[[],38],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[],40],[[45,52]],[52],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[60,[[59,[41]]]],[42,[41]],61],[[43,[[62,[[60,[[59,[41]]]],[42,[41]],61]]]]]],[[[42,[41]],63],[[43,[[42,[41]]]]]]],"c":[],"p":[[3,"TopicKey"],[15,"u8"],[15,"slice"],[8,"Clone"],[3,"Event"],[3,"EventListener"],[3,"Eventbus"],[3,"Topic"],[8,"Into"],[3,"SerializedMessage"],[8,"Sized"],[8,"DeserializeOwned"],[4,"BridgeError"],[4,"Result"],[15,"char"],[8,"FromIterator"],[15,"bool"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[4,"ListenerError"],[3,"Vec"],[15,"str"],[6,"EventListeners"],[8,"Future"],[3,"Box"],[3,"Pin"],[8,"Hasher"],[3,"Request"],[8,"Send"],[8,"Sync"],[3,"Demand"],[15,"usize"],[8,"Listener"],[8,"Serialize"],[8,"Error"],[4,"Option"],[3,"String"],[3,"Utf8Error"],[3,"TypeId"],[6,"BoxBody"],[8,"GrpcService"],[3,"BridgerClientInner"],[4,"CompressionEncoding"],[3,"EventbusBridge"],[3,"Endpoint"],[8,"TryInto"],[3,"Channel"],[3,"Error"],[8,"AsRef"],[3,"BridgedTopic"],[3,"BridgedEventListener"],[3,"BridgeListener"],[4,"SocketAddr"],[8,"IntoRequest"],[3,"Response"],[3,"Status"],[6,"BridgerClient"],[3,"Request"],[8,"Service"],[8,"Interceptor"],[3,"InterceptedService"],[3,"Uri"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
